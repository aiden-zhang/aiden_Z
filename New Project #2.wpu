#!wing
#!version=7.0
##################################################################
# Wing project file : User-specific branch                       #
##################################################################
[user attributes]
debug.breakpoints = {loc('ch03/train.py'): {20L: (0,
        None,
        1,
        0),
        27L: (0,
              None,
              1,
              0)},
                     loc('untitled-1.py'): {3L: (0,
        None,
        1,
        0),
        12: (0,
             None,
             1,
             0)}}
debug.err-values = {loc('ch01/show_spiral_dataset.py'): {},
                    loc('ch03/train.py'): {},
                    loc('untitled-1.py'): {}}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'lbCZQH8XJtsn2tZbl3csWyov8B'\
        'zDEBgw',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   2],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.2493315508021391,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [(0,),
        (2,),
        (8,),
        (9,)],
                                 'selected-nodes': [(2,
        3)],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {loc('file:c:/ProgramData/Anaconda3/Lib/site-packages/numpy/__init__.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('file:c:/ProgramData/Anaconda3/Lib/site-packages/numpy/conftest.py'),
                      '')]},
        loc('file:c:/ProgramData/Anaconda3/Lib/site-packages/numpy/core/numeric.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('file:c:/ProgramData/Anaconda3/Lib/site-packages/numpy/core/numeric.py'),
                      'allclose')]},
        loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/ch03/mnist_show.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/ch03/mnist_show.py'),
                      'img')]},
        loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/ch03/neuralnet_mnist.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/ch03/neuralnet_mnist.py'),
                      'accuracy_cnt')]},
        loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/ch03/neuralnet_mnist_batch.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/ch03/neuralnet_mnist_batch.py'),
                      'accuracy_cnt')]},
        loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/ch04/gradient_1d.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/ch04/gradient_1d.py'),
                      'function_1')]},
        loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/ch04/gradient_2d.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/ch04/gradient_2d.py'),
                      'function_2')]},
        loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/ch04/gradient_method.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/ch04/gradient_method.py'),
                      'function_2')]},
        loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/ch04/gradient_simplenet.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/ch04/gradient_simplenet.py'),
                      'dW')]},
        loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/ch04/train_neuralnet.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/ch04/train_neuralnet.py'),
                      'batch_mask')]},
        loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/ch04/two_layer_net.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/ch04/two_layer_net.py'),
                      'TwoLayerNet')]},
        loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/common/gradient.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/common/gradient.py'),
                      'numerical_gradient')]},
        loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/dataset/__init__.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/dataset/mnist.py'),
                      '')]},
        loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/dataset/mnist.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../\xe3\x80\x90\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x91\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe5\x9f\xba\xe4\xba\x8ePython\xe7\x9a\x84\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8e\xe5\xae\x9e\xe7\x8e\xb0/dataset/mnist.py'),
                      'dataset_dir')]}},
                                'browse_mode': u'Current Module',
                                'follow-selection': False,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': False,
        u'Imported': False,
        u'Modules': True}}),
                              ('snippets',
                               'tall',
                               0,
                               {'tree-states': {'__all__': [],
        u'c': [],
        u'django': [],
        u'html': [],
        u'py': []}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {'codeline-mode': 'below'}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [2,
                          0],
        'notebook_display': 'normal',
        'notebook_percent': 0.1322404371584699,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': '',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {}),
                     ('testing',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'code-line': '',
                       'first-line': 37L,
                       'folded-linenos': [],
                       'history': {u'file:y:/AI3/language/\u3010\u6e90\u4ee3\u7801\u3011\u6df1\u5ea6\u5b66\u4e60\u8fdb\u9636\uff1a\u81ea\u7136\u8bed\u8a00\u5904\u7406/ch03/train.py': ['i'\
        'dx\n',
        'data_size\n',
        'x\n',
        't\n',
        'eval_interval\n',
        'iters\n']},
                       'launch-id': None,
                       'sel-line': 44L,
                       'sel-line-start': 891L,
                       'selection_end': 891L,
                       'selection_start': 891L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'code-line': '',
                       'first-line': 0L,
                       'folded-linenos': [],
                       'history': {},
                       'launch-id': None,
                       'sel-line': 2L,
                       'sel-line-start': 145L,
                       'selection_end': 145L,
                       'selection_start': 145L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {'filter-text': ''}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('ch01/train.py'),
        {'attrib-starts': [],
         'code-line': 'hidden_size = 10\n',
         'first-line': 0L,
         'folded-linenos': [],
         'sel-line': 12L,
         'sel-line-start': 286L,
         'selection_end': 302L,
         'selection_start': 302L,
         'zoom': 0L},
        1634562072.699],
        [loc('ch01/train_custom_loop.py'),
         {'attrib-starts': [],
          'code-line': 'data_size = len(x)\n',
          'first-line': 15L,
          'folded-linenos': [],
          'sel-line': 21L,
          'sel-line-start': 496L,
          'selection_end': 505L,
          'selection_start': 496L,
          'zoom': 0L},
         1634562348.839],
        [loc('ch01/show_spiral_dataset.py'),
         {'attrib-starts': [],
          'code-line': 'import matplotlib.pyplot as plt\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 4L,
          'sel-line-start': 128L,
          'selection_end': 159L,
          'selection_start': 159L,
          'zoom': 0L},
         1634692625.37],
        [loc('ch03/train.py'),
         {'attrib-starts': [],
          'code-line': 'corpus, word_to_id, id_to_word = preprocess(text)\n',
          'first-line': 6L,
          'folded-linenos': [],
          'sel-line': 15L,
          'sel-line-start': 390L,
          'selection_end': 439L,
          'selection_start': 439L,
          'zoom': 0L},
         1634692642.231],
        [loc('ch01/show_spiral_dataset.py'),
         {'attrib-starts': [],
          'code-line': 'import matplotlib.pyplot as plt\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 4L,
          'sel-line-start': 128L,
          'selection_end': 159L,
          'selection_start': 159L,
          'zoom': 0L},
         1634692642.294],
        [loc('untitled-1.py'),
         {'attrib-starts': [],
          'code-line': 'import numpy as np  \r\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 2L,
          'sel-line-start': 43L,
          'selection_end': 43L,
          'selection_start': 43L,
          'zoom': 0L},
         1634692643.648],
        [loc('common/trainer.py'),
         {'attrib-starts': [('Trainer|0|',
                             10),
                            ('Trainer|0|.fit|0|',
                             18)],
          'code-line': '    def fit(self, x, t, max_epoch=10, batch_size=32,'\
                       ' max_grad=None, eval_interval=20):\n',
          'first-line': 3L,
          'folded-linenos': [],
          'sel-line': 18L,
          'sel-line-start': 402L,
          'selection_end': 435L,
          'selection_start': 426L,
          'zoom': 0L},
         1634692645.008],
        [loc('ch01/two_layer_net.py'),
         {'attrib-starts': [],
          'code-line': '# coding: utf-8\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 0L,
          'sel-line-start': 0L,
          'selection_end': 15L,
          'selection_start': 0L,
          'zoom': 0L},
         1634692645.282],
        [loc('ch01/train_custom_loop.py'),
         {'attrib-starts': [],
          'code-line': 'data_size = len(x)\n',
          'first-line': 15L,
          'folded-linenos': [],
          'sel-line': 21L,
          'sel-line-start': 496L,
          'selection_end': 505L,
          'selection_start': 496L,
          'zoom': 0L},
         1634692646.503],
        [loc('ch01/train.py'),
         {'attrib-starts': [],
          'code-line': 'hidden_size = 10\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 12L,
          'sel-line-start': 286L,
          'selection_end': 302L,
          'selection_start': 302L,
          'zoom': 0L},
         1634692648.641],
        [loc('ch03/train.py'),
         {'attrib-starts': [],
          'code-line': 'trainer.fit(contexts, target, max_epoch, batch_size)'\
                       '\n',
          'first-line': 6L,
          'folded-linenos': [],
          'sel-line': 26L,
          'sel-line-start': 728L,
          'selection_end': 781L,
          'selection_start': 728L,
          'zoom': 0L},
         1634692681.865],
        [loc('ch01/show_spiral_dataset.py'),
         {'attrib-starts': [],
          'code-line': "print('x', x.shape)  # (300, 2)\n",
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 8L,
          'sel-line-start': 188L,
          'selection_end': 188L,
          'selection_start': 188L,
          'zoom': 0L},
         1634692692.765],
        [loc('ch03/train.py'),
         {'attrib-starts': [],
          'code-line': 'trainer.fit(contexts, target, max_epoch, batch_size)'\
                       '\n',
          'first-line': 6L,
          'folded-linenos': [],
          'sel-line': 26L,
          'sel-line-start': 728L,
          'selection_end': 728L,
          'selection_start': 728L,
          'zoom': 0L},
         1634692726.736],
        [loc('common/trainer.py'),
         {'attrib-starts': [('Trainer|0|',
                             10),
                            ('Trainer|0|.fit|0|',
                             18)],
          'code-line': '            idx = numpy.random.permutation(numpy.ara'\
                       'nge(data_size))\n',
          'first-line': 14L,
          'folded-linenos': [],
          'sel-line': 29L,
          'sel-line-start': 797L,
          'selection_end': 862L,
          'selection_start': 853L,
          'zoom': 0L},
         1634692888.271],
        [loc('ch01/train.py'),
         {'attrib-starts': [],
          'code-line': 'hidden_size = 10\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 12L,
          'sel-line-start': 286L,
          'selection_end': 302L,
          'selection_start': 302L,
          'zoom': 0L},
         1634692913.713],
        [loc('ch03/train.py'),
         {'attrib-starts': [],
          'code-line': 'trainer.fit(contexts, target, max_epoch, batch_size)'\
                       '\n',
          'first-line': 6L,
          'folded-linenos': [],
          'sel-line': 26L,
          'sel-line-start': 728L,
          'selection_end': 728L,
          'selection_start': 728L,
          'zoom': 0L},
         1634692914.762],
        [loc('ch01/train.py'),
         {'attrib-starts': [],
          'code-line': 'hidden_size = 10\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 12L,
          'sel-line-start': 286L,
          'selection_end': 302L,
          'selection_start': 302L,
          'zoom': 0L},
         1634692916.464],
        [loc('ch03/train.py'),
         {'attrib-starts': [],
          'code-line': 'trainer.fit(contexts, target, max_epoch, batch_size)'\
                       '\n',
          'first-line': 6L,
          'folded-linenos': [],
          'sel-line': 26L,
          'sel-line-start': 728L,
          'selection_end': 728L,
          'selection_start': 728L,
          'zoom': 0L},
         1634692916.469],
        [loc('ch03/train.py'),
         {'attrib-starts': [],
          'code-line': "text = 'You say goodbye and I say hello.'\n",
          'first-line': 6L,
          'folded-linenos': [],
          'sel-line': 14L,
          'sel-line-start': 348L,
          'selection_end': 387L,
          'selection_start': 387L,
          'zoom': 0L},
         1634692936.612],
        [loc('common/trainer.py'),
         {'attrib-starts': [('Trainer|0|',
                             10),
                            ('Trainer|0|.fit|0|',
                             18)],
          'code-line': '                    elapsed_time = time.time() - sta'\
                       'rt_time\n',
          'first-line': 43L,
          'folded-linenos': [],
          'sel-line': 50L,
          'sel-line-start': 1701L,
          'selection_end': 1733L,
          'selection_start': 1721L,
          'zoom': 0L},
         1634693512.962]],
        20),
        'current-loc': loc('ch03/train.py'),
        'editor-state-list': [(loc('ch01/show_spiral_dataset.py'),
                               {'attrib-starts': [],
                                'code-line': "print('x', x.shape)  # (300, 2"\
        ")\n",
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 8L,
                                'sel-line-start': 188L,
                                'selection_end': 188L,
                                'selection_start': 188L,
                                'zoom': 0L}),
                              (loc('ch03/train.py'),
                               {'attrib-starts': [],
                                'code-line': 'vocab_size = len(word_to_id)\n',
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 17L,
                                'sel-line-start': 441L,
                                'selection_end': 469L,
                                'selection_start': 469L,
                                'zoom': 0L}),
                              (loc('common/trainer.py'),
                               {'attrib-starts': [('Trainer|0|',
        10),
        ('Trainer|0|.fit|0|',
         18)],
                                'code-line': '                    elapsed_ti'\
        'me = time.time() - start_time\n',
                                'first-line': 43L,
                                'folded-linenos': [],
                                'sel-line': 50L,
                                'sel-line-start': 1701L,
                                'selection_end': 1733L,
                                'selection_start': 1721L,
                                'zoom': 0L})],
        'has-focus': True,
        'locked': False},
        [loc('ch01/show_spiral_dataset.py'),
         loc('ch03/train.py'),
         loc('common/trainer.py')]),
                               'open_files': [u'ch03/train.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.375497215592681},
        'splits': 2,
        'tab_location': 'top',
        'traversal_pos': ((1,
                           0),
                          1634693358.631),
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.676056338028169},
                 'splits': 2,
                 'tab_location': 'left',
                 'traversal_pos': ((1,
                                    2),
                                   1634561023.226),
                 'user_data': {}},
        'window-alloc': (2139,
                         0,
                         1502,
                         1047)}]}
guimgr.recent-documents = [loc('ch03/train.py'),
                           loc('common/trainer.py'),
                           loc('ch01/show_spiral_dataset.py')]
guimgr.visual-state = {loc('ch01/show_spiral_dataset.py'): {'attrib-starts': [],
        'code-line': 'import matplotlib.pyplot as plt\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 4L,
        'sel-line-start': 128L,
        'selection_end': 159L,
        'selection_start': 159L,
        'zoom': 0L},
                       loc('ch01/train.py'): {'attrib-starts': [],
        'code-line': 'hidden_size = 10\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 286L,
        'selection_end': 302L,
        'selection_start': 302L,
        'zoom': 0L},
                       loc('ch01/train_custom_loop.py'): {'attrib-starts': [],
        'code-line': 'data_size = len(x)\n',
        'first-line': 15L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 496L,
        'selection_end': 505L,
        'selection_start': 496L,
        'zoom': 0L},
                       loc('ch01/two_layer_net.py'): {'attrib-starts': [],
        'code-line': '# coding: utf-8\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 15L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('ch03/train.py'): {'attrib-starts': [],
        'code-line': 'corpus, word_to_id, id_to_word = preprocess(text)\n',
        'first-line': 6L,
        'folded-linenos': [],
        'sel-line': 15L,
        'sel-line-start': 390L,
        'selection_end': 439L,
        'selection_start': 439L,
        'zoom': 0L},
                       loc('common/trainer.py'): {'attrib-starts': [('Traine'\
        'r|0|',
        10),
        ('Trainer|0|.fit|0|',
         18)],
        'code-line': '    def fit(self, x, t, max_epoch=10, batch_size=32, m'\
                     'ax_grad=None, eval_interval=20):\n',
        'first-line': 3L,
        'folded-linenos': [],
        'sel-line': 18L,
        'sel-line-start': 402L,
        'selection_end': 435L,
        'selection_start': 426L,
        'zoom': 0L},
                       loc('untitled-1.py'): {'attrib-starts': [],
        'code-line': 'import numpy as np  \r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 2L,
        'sel-line-start': 43L,
        'selection_end': 43L,
        'selection_start': 43L,
        'zoom': 0L}}
proj.pyexec = {None: ('custom',
                      u'c:\\ProgramData\\Anaconda3\\python.exe')}
testing.stored-results = (1,
                          [],
                          {})
